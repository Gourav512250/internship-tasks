import speech_recognition as sr
import pyttsx3
import webbrowser
import os
import datetime
import subprocess


class VoiceAssistant:
    def __init__(self, name: str = "Assistant"):
        self.name = name
        self.speech_engine = pyttsx3.init()
        self.recognizer = sr.Recognizer()
        self.commands = {
            "open website": self.open_website,
            "what time is it": self.tell_time,
            "play music": self.play_music,
            "stop listening": self.stop_listening,
        }
        self.listening = True

        # Setup voice properties
        self.speech_engine.setProperty('rate', 150)  # Speed percent (can be adjusted)
        self.speech_engine.setProperty('volume', 1.0)  # Volume 0-1

    def speak(self, text: str) -> None:
        """Convert text to speech."""
        self.speech_engine.say(text)
        self.speech_engine.runAndWait()

    def listen(self) -> str:
        """Listen and recognize speech from the microphone."""
        with sr.Microphone() as source:
            print("Listening...")
            self.recognizer.adjust_for_ambient_noise(source, duration=0.5)
            audio = self.recognizer.listen(source)

        try:
            query = self.recognizer.recognize_google(audio).lower()
            print(f"User said: {query}")
            return query
        except sr.UnknownValueError:
            self.speak("Sorry, I did not understand that.")
        except sr.RequestError:
            self.speak("Sorry, I'm having trouble connecting to the speech service.")
        return ""

    def open_website(self, url: str = "https://www.google.com") -> None:
        """Open a website in the default browser."""
        self.speak(f"Opening website {url}")
        webbrowser.open(url)

    def tell_time(self) -> None:
        """Tell the current time."""
        now = datetime.datetime.now().strftime("%I:%M %p")
        self.speak(f"The time is {now}")

    def play_music(self, music_path: str = None) -> None:
        """
        Play music from a given path or default location.
        If no path is provided, plays a default music file.
        """
        if music_path is None:
            # Default music file path (modify to a valid mp3 or wav on your system)
            music_path = "your_default_music.mp3"

        if os.path.exists(music_path):
            self.speak("Playing music.")
            if os.name == 'nt':  # Windows
                os.startfile(music_path)
            elif os.name == 'posix':  # macOS/Linux
                subprocess.call(["open" if sys.platform == "darwin" else "xdg-open", music_path])
        else:
            self.speak("Sorry, I could not find the music file.")

    def stop_listening(self) -> None:
        """Stop the voice assistant."""
        self.speak("Goodbye!")
        self.listening = False

    def process_command(self, command: str) -> None:
        """
        Process the user's voice command.
        Supports simple command matching and execution.
        """
        if "open" in command and "website" in command:
            # Extract URL or default to Google
            words = command.split()
            url = next((word for word in words if word.startswith("http")), "https://www.google.com")
            self.open_website(url)
        elif "time" in command:
            self.tell_time()
        elif "play music" in command:
            self.play_music()
        elif "stop" in command or "exit" in command or "quit" in command:
            self.stop_listening()
        else:
            self.speak("I’m sorry, I don’t know how to help with that yet.")

    def run(self) -> None:
        """Main loop to continuously listen and respond to commands."""
        self.speak(f"Hello, I am your {self.name}. How can I assist you today?")
        while self.listening:
            command = self.listen()
            if command:
                self.process_command(command)


if __name__ == "__main__":
    assistant = VoiceAssistant(name="Nova")
    assistant.run()
